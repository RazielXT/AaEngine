import ssao
import exposure
import bloom

compositor SceneCompositor
{
	texture sceneTexture target_size Color:DXGI_FORMAT_R8G8B8A8_UNORM Normal:DXGI_FORMAT_R10G10B10A2_UNORM Distance:DXGI_FORMAT_R16G16_UNORM MotionVectors:DXGI_FORMAT_R16G16_FLOAT Depth
	texture sceneTransparentTexture target_size Color:DXGI_FORMAT_R8G8B8A8_UNORM Fill:DXGI_FORMAT_R8G8B8A8_UNORM
	texture sceneTexture2 target_size DXGI_FORMAT_R8G8B8A8_UNORM
	texture sceneTransparentTextureDownscale4 target_size_div 4 DXGI_FORMAT_R8G8B8A8_UNORM
	texture sceneTransparentTexture2 target_size DXGI_FORMAT_R8G8B8A8_UNORM
	texture sceneColors target_size DXGI_FORMAT_R8G8B8A8_UNORM
	texture motionVectors target_size DXGI_FORMAT_R16G16_FLOAT
	rwtexture sceneTexture2_upscaled output_size DXGI_FORMAT_R8G8B8A8_UNORM
	texture sceneTexture3 output_size DXGI_FORMAT_R8G8B8A8_UNORM

	texture sceneDownscale2 target_size_div 2 DXGI_FORMAT_R8G8B8A8_UNORM
	texture sceneDownscale4 target_size_div 8 DXGI_FORMAT_R8G8B8A8_UNORM

	texture depthDownsample2 output_size_div 2 DXGI_FORMAT_R32_FLOAT
	texture depthDownsample4 output_size_div 4 DXGI_FORMAT_R32_FLOAT

	texture voxelDummy 128 128 DXGI_FORMAT_R8G8B8A8_UNORM

	task VoxelScene
	{
		target voxelDummy
	}

	task Shadows
	{
	}

	task Scene
	{
		params EarlyZ

		after Shadows
		target sceneTexture
	}

	ref SSAO:SSAO

	pass SceneDownscale
	{
		material PassThrough
		input sceneTexture:Color
		target sceneDownscale2
	}
	pass SceneDownscale
	{
		material PassThrough
		input sceneDownscale2
		target sceneDownscale4
	}
	pass DepthDownscale
	{
		material LoadThrough
		input sceneTexture:Depth
		target depthDownsample2
	}
	pass DepthDownscale
	{
		material LoadThrough
		input depthDownsample2
		target depthDownsample4
	}

	pass SSAODarken
	{
		material Darken
		input sceneTexture:Color
		input aoSmooth
		target sceneTexture2
	}

	task SceneTransparent
	{
		input sceneTexture:Distance
		input sceneTexture2
		input depthDownsample2
		input depthDownsample4
		target sceneTransparentTexture sceneTexture:Depth (depth_read)
	}

	pass ApplySceneWater
	{
		material ApplySceneWater
		input sceneTexture2
		input sceneTransparentTexture
		target sceneColors
	}

	ref Exposure:*

	ref Bloom:*

#if DLSS
	pass MotionVectors
	{
		material MotionVectors
		input sceneTexture:Depth
		input sceneTexture:MotionVectors
		target motionVectors
	}

	task Upscale (compute_shader)
	{
		input sceneColors
		input motionVectors
		input sceneTexture:Depth
		input sceneTexture2_upscaled
	}

	pass Combine
	{
		material AddThrough
		input sceneTexture2_upscaled
		input bloomTexture
		input exposure
		target Backbuffer
	}
#else
	pass Combine
	{
		material AddThrough
		input sceneColors
		input bloomTexture
		input exposure
		target sceneTexture3
	}

	pass Fxaa
 	{
		material FXAA
		input sceneTexture3
 		target Backbuffer
 	}
#endif

	task DebugOverlay
	{
		target Backbuffer
	}

	task Imgui
	{
		target Backbuffer
	}
}
